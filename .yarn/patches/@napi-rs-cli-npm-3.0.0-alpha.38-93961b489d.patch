diff --git a/dist/api/universalize.js b/dist/api/universalize.js
index 9bed8a5bea83f8b410c89db18a859ce5ef083342..ebb36c3d5e0b725fc0f930e7e434da185eccd26b 100644
--- a/dist/api/universalize.js
+++ b/dist/api/universalize.js
@@ -21,13 +21,13 @@ export async function universalizeBinaries(userOptions) {
     if (!target) {
         throw new Error(`'universal' arch for platform '${process.platform}' not found in config!`);
     }
-    const srcFiles = UniArchsByPlatform[process.platform]?.map((arch) => `${config.binaryName}.${process.platform}-${arch}.node`);
+    const srcFiles = UniArchsByPlatform[process.platform]?.map((arch) => resolve(options.cwd, options.outputDir, `${config.binaryName}.${process.platform}-${arch}.node`));
     if (!srcFiles || !universalizers[process.platform]) {
         throw new Error(`'universal' arch for platform '${process.platform}' not supported.`);
     }
     debug(`Looking up source binaries to combine: `);
     debug('  %O', srcFiles);
-    const srcFileLookup = await Promise.all(srcFiles.map((f) => fileExists(resolve(options.cwd, options.outputDir, f))));
+    const srcFileLookup = await Promise.all(srcFiles.map((f) => fileExists(f)));
     const notFoundFiles = srcFiles.filter((_, i) => !srcFileLookup[i]);
     if (notFoundFiles.length) {
         throw new Error(`Some binary files were not found: ${JSON.stringify(notFoundFiles)}`);
